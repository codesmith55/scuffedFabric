prefix='Building a RAG (Retrieval-Augmented Generation) chain in LCEL involves creating a chain that retrieves relevant documents and then uses an LLM to generate a response based on those documents. Below is an example of how to build such a chain.' imports="import { LCEL } from 'langchain';" code="const ragChain = LCEL.chain({\n  steps: [\n    {\n      name: 'retriever',\n      type: 'document_retriever',\n      params: {\n        query: '{{input.query}}',\n        retriever: 'my_document_retriever',\n      },\n    },\n    {\n      name: 'generator',\n      type: 'llm',\n      params: {\n        prompt: 'Based on the following documents, answer the question: {{input.query}}\\n\\nDocuments:\\n{{retriever.documents}}',\n        model: 'my_llm_model',\n      },\n    },\n  ],\n  input_schema: {\n    type: 'object',\n    properties: {\n      query: { type: 'string' },\n    },\n    required: ['query'],\n  },\n  output_schema: {\n    type: 'object',\n    properties: {\n      answer: { type: 'string' },\n    },\n  },\n});\n\nexport default ragChain;" description='This code defines a RAG chain in LCEL. The chain consists of two steps: a document retriever and an LLM generator. The input schema requires a query string, and the output schema provides an answer string.'